kind: pipeline
type: docker
name: linux-amd64

platform:
  os: linux
  arch: amd64

environment:
  GOOS: linux
  GOARCH: amd64
  ARTIFACTS_SUBSET_ID: $DRONE_BUILD_NUMBER
  ARTIFACTS_REPOSITORIES: http://artifacts-cache:8080

steps:
  - name: test_go
    image: golang:alpine3.16
    commands:
      - apk add --no-cache --update gcc musl-dev
      - go mod download
      - go test ./...

  - name: build
    image: golang:alpine3.16
    commands:
      - apk add --no-cache --update gcc musl-dev
      - go build -o docker/repository cmd/repository/main.go
      - go build -o artifacts cmd/artifacts/main.go
      - chmod +x docker/repository
      - chmod +x artifacts
      - ldd docker/repository
      - ldd artifacts
      - echo -n "1.0.$DRONE_BUILD_NUMBER,latest" > .tags

  - name: publish
    image: plugins/docker
    settings:
      repo: eugenezadyra/artifacts-cache
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      dockerfile: docker/Dockerfile
      context: docker/

  - name: artifacts-cache
    image: eugenezadyra/artifacts-cache
    detach: true

  - name: test_push
    image: alpine:3.16
    commands:
      - apk add --no-cache --update netcat-openbsd
      - while ! `nc -z artifacts-cache 8080`; do sleep 1; done
      - mkdir -p files
      - echo "Content 1" > files/file1.txt
      - echo "Content 2" > files/file2.txt
      - echo "Content 3" > files/file3.png
      - ./artifacts push 'files/*.txt'

  - name: test_pull
    image: alpine:3.16
    commands:
      - chmod +x ./scripts/test_pull.sh
      - ./scripts/test_pull.sh

